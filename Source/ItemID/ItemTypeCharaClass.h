#ifndef __ITEMTYPE_CHARACLASS_H
#define	__ITEMTYPE_CHARACLASS_H

//////////////////////////////////////////////////////////////////////////////////////
// GoodsID( GoodsType.h 와 중복됨 )
typedef		UINT32		TGoodsID;	// Goods  ID

//////////////////////////////////////////////////////////////////////////
// Data Type(CommonDef.h에서 연결되지 않아 선언)
typedef		UINT32		T_ItemID;	// 아이템 ID

//////////////////////////////////////////////////////////////////////////////////////
// MAKE_ITEM_FLAG(ITEM_EVENT_TYPE, ITEM_TYPE, CHARACTER_CLASS_TYPE, CHARACTER_RES_ID)
//////////////////////////////////////////////////////////////////////////////////////
//
// 캐릭터 class 분류 방식
//
// 아이템 아이디 세번째에 들어갑니다. ( 3 )
//
// 유효 값 범위 : 999
// 아이템 아이디에서 저장되는 자릿수 : 
//
// 99000
//~ 1000
//




enum SENTRYGUN_RES_ID
{
	SENTRYGUN_RES_ID_UNKNOWN = 0,
	SENTRYGUN_RES_ID_DEFAULT,
	SENTRYGUN_RES_ID_LEVEL2,
	SENTRYGUN_RES_ID_LEVEL3,
	SENTRYGUN_RES_ID_LEVEL4,

	SENTRYGUN_MAX
};


// 헬멧은 ( 헬멧, 헬멧 마스크, 베레모, 이벤트모자) 모두를 관리합니다.
enum HEAD_RES_ID
{
	HEAD_RES_ID_UNKNOWN				= 0,

	HEAD_RES_ID_DEFAULT,					//	기본 헬멧
	HEAD_RES_ID_NORMAL,
	HEAD_RES_ID_REINFORCE,
	HEAD_RES_ID_HEAT,
	HEAD_RES_ID_RADAR,
	HEAD_RES_ID_TARGET,
	HEAD_RES_ID_STRENGTHENPLUS,
	HEAD_RES_ID_SUPER,
	HEAD_RES_ID_ANGELRING,

	MAX_HEAD_RES_ID,
	HEAD_RES_ID_BERET_UNKNOWN		= 200,

	HEAD_RES_ID_BERET_ASSAULT,				// 광폭한 맹수 베레모 (호칭 마스터)
	HEAD_RES_ID_BERET_SMG,					// 교활한 침입자 베레모 (호칭 마스터)
	HEAD_RES_ID_BERET_RIFLE,				// 은밀한 암살자 베레모 (호칭 마스터)
	HEAD_RES_ID_BERET_SHOTGUN,				// 난폭한 파괴자 베레모 (호칭 마스터)
	HEAD_RES_ID_BERET_HANDGUN,				// 예리한 명사수 베레모 (호칭 마스터)
	HEAD_RES_ID_BERET_BLACK,				// 블랙 베레모

	HEAD_RES_ID_BERET_ASSAULT_REF,			// 광폭한 맹수 베레모 (호칭 마스터)		+ REINFORCE
	HEAD_RES_ID_BERET_SMG_REF,				// 교활한 침입자 베레모 (호칭 마스터)	+ REINFORCE
	HEAD_RES_ID_BERET_RIFLE_REF,			// 은밀한 암살자 베레모 (호칭 마스터)	+ REINFORCE
	HEAD_RES_ID_BERET_SHOTGUN_REF,			// 난폭한 파괴자 베레모 (호칭 마스터)	+ REINFORCE
	HEAD_RES_ID_BERET_HANDGUN_REF,			// 예리한 명사수 베레모 (호칭 마스터)	+ REINFORCE
	HEAD_RES_ID_BERET_BLACK_REF,			// 블랙 베레모							+ REINFORCE

	HEAD_RES_ID_BERET_ASSAULT_HEAT,			// 광폭한 맹수 베레모 (호칭 마스터)		+ HEAT
	HEAD_RES_ID_BERET_SMG_HEAT,				// 교활한 침입자 베레모 (호칭 마스터)	+ HEAT
	HEAD_RES_ID_BERET_RIFLE_HEAT,			// 은밀한 암살자 베레모 (호칭 마스터)	+ HEAT
	HEAD_RES_ID_BERET_SHOTGUN_HEAT,			// 난폭한 파괴자 베레모 (호칭 마스터)	+ HEAT
	HEAD_RES_ID_BERET_HANDGUN_HEAT,			// 예리한 명사수 베레모 (호칭 마스터)	+ HEAT
	HEAD_RES_ID_BERET_BLACK_HEAT,			// 블랙 베레모							+ HEAT

	HEAD_RES_ID_BERET_ASSAULT_RADER,		// 광폭한 맹수 베레모 (호칭 마스터)		+ RADER
	HEAD_RES_ID_BERET_SMG_RADER,			// 교활한 침입자 베레모 (호칭 마스터)	+ RADER
	HEAD_RES_ID_BERET_RIFLE_RADER,			// 은밀한 암살자 베레모 (호칭 마스터)	+ RADER
	HEAD_RES_ID_BERET_SHOTGUN_RADER,		// 난폭한 파괴자 베레모 (호칭 마스터)	+ RADER
	HEAD_RES_ID_BERET_HANDGUN_RADER,		// 예리한 명사수 베레모 (호칭 마스터)	+ RADER
	HEAD_RES_ID_BERET_BLACK_RADER,			// 블랙 베레모							+ RADER

	HEAD_RES_ID_BERET_ASSAULT_TARGET,		// 광폭한 맹수 베레모 (호칭 마스터)		+ TARGET
	HEAD_RES_ID_BERET_SMG_TARGET,			// 교활한 침입자 베레모 (호칭 마스터)	+ TARGET
	HEAD_RES_ID_BERET_RIFLE_TARGET,			// 은밀한 암살자 베레모 (호칭 마스터)	+ TARGET
	HEAD_RES_ID_BERET_SHOTGUN_TARGET,		// 난폭한 파괴자 베레모 (호칭 마스터)	+ TARGET
	HEAD_RES_ID_BERET_HANDGUN_TARGET,		// 예리한 명사수 베레모 (호칭 마스터)	+ TARGET
	HEAD_RES_ID_BERET_BLACK_TARGET,			// 블랙 베레모							+ TARGET

	HEAD_RES_ID_BERET_ASSAULT_STR,			// 광폭한 맹수 베레모 (호칭 마스터)		+ STRENGTH
	HEAD_RES_ID_BERET_SMG_STR,				// 교활한 침입자 베레모 (호칭 마스터)	+ STRENGTH
	HEAD_RES_ID_BERET_RIFLE_STR,			// 은밀한 암살자 베레모 (호칭 마스터)	+ STRENGTH
	HEAD_RES_ID_BERET_SHOTGUN_STR,			// 난폭한 파괴자 베레모 (호칭 마스터)	+ STRENGTH
	HEAD_RES_ID_BERET_HANDGUN_STR,			// 예리한 명사수 베레모 (호칭 마스터)	+ STRENGTH
	HEAD_RES_ID_BERET_BLACK_STR,			// 블랙 베레모							+ STRENGTH

	HEAD_RES_ID_BERET_ASSAULT_SUP,			// 광폭한 맹수 베레모 (호칭 마스터)		+ SUPER
	HEAD_RES_ID_BERET_SMG_SUP,				// 교활한 침입자 베레모 (호칭 마스터)	+ SUPER
	HEAD_RES_ID_BERET_RIFLE_SUP,			// 은밀한 암살자 베레모 (호칭 마스터)	+ SUPER
	HEAD_RES_ID_BERET_SHOTGUN_SUP,			// 난폭한 파괴자 베레모 (호칭 마스터)	+ SUPER
	HEAD_RES_ID_BERET_HANDGUN_SUP,			// 예리한 명사수 베레모 (호칭 마스터)	+ SUPER
	HEAD_RES_ID_BERET_BLACK_SUP,			// 블랙 베레모							+ SUPER

	HEAD_RES_ID_BERET_CHE_RED_STAR,			// 체게바라 붉은별 베레모
	HEAD_RES_ID_BERET_CHE_YELLOW_STAR,		// 체게바라 노란별 베레모
	HEAD_RES_ID_BERET_CHE_CROSS_SWORD,		// 체게바라 칼교차 베레모

	HEAD_RES_ID_BERET_THAI_PBTN,			// 태국 PBTN 베레모
	HEAD_RES_ID_BERET_BLACKPB,				// BLACK PB 베레모
	
	MAX_HEAD_RES_ID_BERET,
	HEAD_RES_ID_EVENT_UNKNOWN		= 400,	

	HEAD_RES_ID_SANTA_HAT,
	HEAD_RES_ID_CHINESE_HAT,
	HEAD_RES_ID_HAIRBAND,
	HEAD_RES_ID_COWBOY_HAT,

	MAX_HEAD_RES_ID_EVENT,
	HEAD_RES_ID_TEMP_UNKNOWN		= 600,	// 추가작업이 있을때 명칭을 변경한다.

};
//////////////////////////////////////////////////////////////////////////
enum HEAD_RES_ID_MASK
{	
	//마스크 추가
	HEAD_RES_ID_MASK_UNKNOWN	= 0,		// MASK Start

	HEAD_RES_ID_MASK_WHITE,
	HEAD_RES_ID_MASK_BLACK,
	HEAD_RES_ID_MASK_RUSSIAN_BLUE,
	HEAD_RES_ID_MASK_ROK_MARINE,
	HEAD_RES_ID_MASK_FRENCH_DESERT,

	HEAD_RES_ID_MASK_FLAME,
	HEAD_RES_ID_MASK_TWO_TONE_BR,
	HEAD_RES_ID_MASK_IRON,
	HEAD_RES_ID_MASK_TARGET_MARK,
	HEAD_RES_ID_MASK_PUMPKIN,

	HEAD_RES_ID_MASK_JEWEL_PINK,
	HEAD_RES_ID_MASK_SMILE_GOLD,
	HEAD_RES_ID_MASK_SKULL,
	HEAD_RES_ID_MASK_PIERROT,
	HEAD_RES_ID_MASK_ALIEN_BLUE_EYES,

	HEAD_RES_ID_MASK_ALIEN_RED_EYES,
	HEAD_RES_ID_MASK_CROSS_RED,
	HEAD_RES_ID_MASK_JASON,
	HEAD_RES_ID_MASK_PANDA,
	HEAD_RES_ID_MASK_EGG,
	HEAD_RES_ID_MASK_DEATH,

	HEAD_RES_ID_MASK_WORLDCUP_ARGENTINA,
	HEAD_RES_ID_MASK_WORLDCUP_BRAZIL,
	HEAD_RES_ID_MASK_WORLDCUP_ENGLAND,
	HEAD_RES_ID_MASK_WORLDCUP_FRANCE,
	HEAD_RES_ID_MASK_WORLDCUP_GERMANY,
	HEAD_RES_ID_MASK_WORLDCUP_ITALIA,
	HEAD_RES_ID_MASK_WORLDCUP_JAPAN,
	HEAD_RES_ID_MASK_WORLDCUP_S_AFRICA,
	HEAD_RES_ID_MASK_WORLDCUP_S_KOREA,
	HEAD_RES_ID_MASK_WORLDCUP_SPAIN,

	HEAD_RES_ID_MASK_TIGER,
	HEAD_RES_ID_MASK_JESTER_BW,
	HEAD_RES_ID_MASK_WRESTLING,

	HEAD_RES_ID_MASK_RUSSIA,
	HEAD_RES_ID_MASK_UKRAINE,
	HEAD_RES_ID_MASK_BELORUS,
	HEAD_RES_ID_MASK_KAZAHSTAN,

	HEAD_RES_ID_MASK_RED_DEVIL,					// 레드 데빌

	HEAD_RES_ID_MASK_TURKEY_FC_BESIKTAS,		// 터키 축구 클럽 베식타스
	HEAD_RES_ID_MASK_TURKEY_FC_BURSAPOR,		// 터키 축구 클럽 부르사스포르
	HEAD_RES_ID_MASK_TURKEY_FC_FENERBAHCE,		// 터키 축구 클럽 페네르바체
	HEAD_RES_ID_MASK_TURKEY_FC_GALATASARAY,		// 터키 축구 클럽 갈라타사라이
	HEAD_RES_ID_MASK_TURKEY_FC_TRABZONSPOR,		// 터키 축구 클럽 트라브존스포르

	HEAD_RES_ID_MASK_FRAIL_SKULL,

	HEAD_RES_ID_MASK_LATIN_AMERICA_BAHAMAS,		// 중남미 마스크 (바하마)
	HEAD_RES_ID_MASK_LATIN_AMERICA_BOLIVIA,		// 중남미 마스크 (볼리비아)
	HEAD_RES_ID_MASK_LATIN_AMERICA_CAYMAN,		// 중남미 마스크 (케이먼 제도)
	HEAD_RES_ID_MASK_LATIN_AMERICA_CHILE,		// 중남미 마스크 (칠레)
	HEAD_RES_ID_MASK_LATIN_AMERICA_COLOMBIA,	// 중남미 마스크 (콜롬비아)
	HEAD_RES_ID_MASK_LATIN_AMERICA_COSTARICA,	// 중남미 마스크 (코스타리카)
	HEAD_RES_ID_MASK_LATIN_AMERICA_HONDURAS,	// 중남미 마스크 (온두라스)
	HEAD_RES_ID_MASK_LATIN_AMERICA_JAMAICA,		// 중남미 마스크 (자메이카)
	HEAD_RES_ID_MASK_LATIN_AMERICA_MEXICO,		// 중남미 마스크 (멕시코)
	HEAD_RES_ID_MASK_LATIN_AMERICA_NICARAGUA,	// 중남미 마스크 (니카라과)
	HEAD_RES_ID_MASK_LATIN_AMERICA_PANAMA,		// 중남미 마스크 (파나마)
	HEAD_RES_ID_MASK_LATIN_AMERICA_PARAGUAY,	// 중남미 마스크 (파라과이)
	HEAD_RES_ID_MASK_LATIN_AMERICA_DOMINICAN,	// 중남미 마스크 (도미니카 공화국)
	HEAD_RES_ID_MASK_LATIN_AMERICA_ECUADOR,		// 중남미 마스크 (에콰도르)
	HEAD_RES_ID_MASK_LATIN_AMERICA_FRENCH_GUYANA,	// 중남미 마스크 (가이아나 프랑스령)
	HEAD_RES_ID_MASK_LATIN_AMERICA_GUATEMALA,	// 중남미 마스크 (과테말라)
	HEAD_RES_ID_MASK_LATIN_AMERICA_GUYANA,		// 중남미 마스크 (가이아나)
	HEAD_RES_ID_MASK_LATIN_AMERICA_HAITI,		// 중남미 마스크 (아이티)
	HEAD_RES_ID_MASK_LATIN_AMERICA_PERU	,		// 중남미 마스크 (페루)
	HEAD_RES_ID_MASK_LATIN_AMERICA_PUERTORICO,	// 중남미 마스크 (푸에르토리코)
	HEAD_RES_ID_MASK_LATIN_AMERICA_SURINAME,	// 중남미 마스크 (수리남)
	HEAD_RES_ID_MASK_LATIN_AMERICA_TRINIDAD,	// 중남미 마스크 (트리니다드토바고)
	HEAD_RES_ID_MASK_LATIN_AMERICA_URUGUAY,		// 중남미 마스크 (우루과이)
	HEAD_RES_ID_MASK_LATIN_AMERICA_VENEZUELA,	// 중남미 마스크 (베네수엘라)
	HEAD_RES_ID_MASK_LATIN_AMERICA_ARGENTINA,	// 중남미 마스크 (아르헨티나)

	HEAD_RES_ID_MASK_DINOSKULL,					// 공룡 해골 마스크

	HEAD_RES_ID_MASK_FLAG_NA_RAPTR,				//북미 Raptr 마스크
	HEAD_RES_ID_MASK_FLAG_CANADA,				//카나다 국기 마스크
	HEAD_RES_ID_MASK_FLAG_UK,					//영국(United Kingdom) 국기 마스크
	HEAD_RES_ID_MASK_FLAG_USA,					//미국(United States America) 국기 마스크
	HEAD_RES_ID_MASK_FLAG_INDONESIA,			//인도네시아(Indonesia) 국기 마스크

	HEAD_RES_ID_MASK_THAI_PBTN,					//태국 대회용 마스크
	HEAD_RES_ID_MASK_CHINA_RED,					//중국 변겸 마스크
	HEAD_RES_ID_MASK_REINFORCE_BLACK,			//터키 강화 블랙 마스크

	HEAD_RES_ID_MASK_ITALY_AZZURRO_E_BIANCO,	// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_AZZURRO_E_ROSSA,		// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_BIANCA_E_NERA,		// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_BIANCO_E_AZZURRO,	// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_BLU_E_NERA,			// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_BLU_E_ROSSA,			// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_CROCE_NERA,			// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_GIALLO_E_AMARANTO,	// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_NERA_BIANCA_E_ROSSA,	// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_NERA_E_BIANCA,		// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_NERA_E_BLU,			// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_NERA_E_ROSA,			// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_NERA_GIALLA_E_BIANCA,	// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_ROSSO_E_GIALLA,		// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_STELLA,				// 이태리 프로축구
	HEAD_RES_ID_MASK_ITALY_VIOLA,				// 이태리 프로축구

	HEAD_RES_ID_MASK_BRAZIL_TROLL,				// 브라질 troll
	HEAD_RES_ID_MASK_BRAZIL_DETERMINADO	,		// 브라질 determinado
	HEAD_RES_ID_MASK_BRAZIL_FUUU,				// 브라질 FUUU

	HEAD_RES_ID_MASK_DINO_TREX,					//인도네시아 공룡 마스크

	HEAD_RES_ID_MASK_TROJAN_MASK,				//북미 Trojan 마스크
	HEAD_RES_ID_MASK_FRAIL_SKULL_GOLD,			//인도네시아 Fail Skull Gold 마스크

	HEAD_RES_ID_MASK_TURKEY_FC_BESIKTAS_V2,		// 터키 강화 축구 클럽 베식타스
	HEAD_RES_ID_MASK_TURKEY_FC_BURSAPOR_V2,		// 터키 강화 축구 클럽 부르사스포르
	HEAD_RES_ID_MASK_TURKEY_FC_FENERBAHCE_V2,	// 터키 강화 축구 클럽 페네르바체
	HEAD_RES_ID_MASK_TURKEY_FC_GALATASARAY_V2,	// 터키 강화 축구 클럽 갈라타사라이
	HEAD_RES_ID_MASK_TURKEY_FC_TRABZONSPOR_V2,	// 터키 강화 축구 클럽 트라브존스포르

	HEAD_RES_ID_MASK_PBIC12,					//PBIC'12 마스크
	
	HEAD_RES_ID_MASK_RUSSIAN_BLUE_TIGER_EV,		// 대만 이벤트용 마스크
	HEAD_RES_ID_MASK_KOREA_MARINE_EV,			// 대만 이벤트용 마스크
	HEAD_RES_ID_MASK_FRANCE_DESERT_EV,			// 대만 이벤트용 마스크
	HEAD_RES_ID_MASK_BLACK_EV,					// 대만 이벤트용 마스크
	HEAD_RES_ID_MASK_WHITE_EV,					// 대만 이벤트용 마스크

	HEAD_RES_ID_MASK_GATOTKACA,					// 인도네시아 Gatokaca 마스크

	MAX_HEAD_RES_ID_MASK
};

typedef UINT32 HOLSTER_RES_ID;
typedef UINT32 BELT_RES_ID;

enum UPPER_RES_ID
{
	UPPER_RES_ID_UNKNOWN = 0,
	UPPER_RES_ID_ACIDPOLE_DFT,
	UPPER_RES_ID_ACIDPOLE_ORI,
	UPPER_RES_ID_REDBULLS_DFT,
	UPPER_RES_ID_REDBULLS_ORI,
	UPPER_RES_ID_COLLAR_JACKET,
};

enum LOWER_RES_ID
{
	LOWER_RES_ID_UNKNOWN = 0,
	LOWER_RES_ID_DEFAULT,
};

enum GLOVE_RES_ID
{
	GLOVE_RES_ID_UNKNOWN = 0,
	GLOVE_RES_ID_DEFAULT,
};

//////////////////////////////////////////////////////////////////////////

enum ENUM_USE_CHARA_TYPE
{
	ENUM_USE_NONE	= 0,	// 사용안함
	ENUM_USE_MAN,			// 남자전용
	ENUM_USE_WOMAN,			// 여자전용
};

enum ENUM_USE_CHARA_COUNT
{
	ENUM_USE_MAN_COUNT		= 4,
	ENUM_USE_WOMAN_COUNT	= 4,
};

const T_ItemID	g_UseManChara[ENUM_USE_MAN_COUNT] =
{
	601001,
	602002,
	601007,
	602008,
};

const T_ItemID	g_UseWoManChara[ENUM_USE_WOMAN_COUNT] =
{
	601003,
	602004,	
	601005,
	602009,
};

enum ENUM_USE_PARTS_COUNT
{
	ENUM_HEAD_GEAR_COUNT		= 8,	// 17
	ENUM_FACE_GEAR_COUNT		= 2,	// 4
	ENUM_UPPER_COUNT			= 22,
	ENUM_LOWER_COUNT			= 20,
	ENUM_GLOVE_COUNT			= 11,
	ENUM_BELT_COUNT				= 8,	// 10
	ENUM_HOLSTER_COUNT			= 8,	// 10
};

enum ENUM_USE_PARTS_TYPE
{
	ENUM_ITEMID			= 0,	// ItemID
	ENUM_GOODSID,				// GoodsID
	ENUM_CHARA_TYPE,			// ENUM_USE_CHARA_TYPE
	ENUM_CHARA_RES_ID,			// CHARA_RES_ID

	MAX_USE_PARTS_TYPE
};

//////////////////////////////////////////////////////////////////////////
//	Parts List
//////////////////////////////////////////////////////////////////////////

const T_ItemID	g_UseHeadGear[ENUM_HEAD_GEAR_COUNT][MAX_USE_PARTS_TYPE] =
{
	{700002, 70000200,ENUM_USE_MAN, CHARA_RES_ID_ACID_POLE},
	{700005, 70000500,ENUM_USE_MAN, CHARA_RES_ID_RED_BULLS},
	{700017, 70001700,ENUM_USE_WOMAN, CHARA_RES_ID_SWAT_FEMALE},
	{700006, 70000600,ENUM_USE_WOMAN, CHARA_RES_ID_TARANTULA},
	{700018, 70001800,ENUM_USE_MAN, CHARA_RES_ID_D_FOX},
	{700019, 70001900,ENUM_USE_MAN, CHARA_RES_ID_LEOPARD},
	{700020, 70002000,ENUM_USE_WOMAN, CHARA_RES_ID_VIPERRED},
	{700021, 70002100,ENUM_USE_WOMAN, CHARA_RES_ID_HIDE},
  /*{700007, 70000700,ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},
	{700011, 70001100,ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},
	{700012, 70001200,ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},
	{700016, 70001600,ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},
	{700015, 70001500,ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},
	{700008, 70000800,ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},
	{700004, 70000400,ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},
	{700009, 70000900,ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},
	{700010, 70001000,ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},*/
};

const T_ItemID	g_UseFaceGear[ENUM_FACE_GEAR_COUNT][MAX_USE_PARTS_TYPE] =
{
//	{800001, 80000100, ENUM_USE_NONE, CHARA_RES_ID_ACID_POLE},
//	{800002, 80000200, ENUM_USE_NONE, CHARA_RES_ID_ACID_POLE},
	{800003, 80000300, ENUM_USE_MAN, CHARA_RES_ID_RED_BULLS},
	{800004, 80000400, ENUM_USE_WOMAN, CHARA_RES_ID_VIPERRED},
};

const T_ItemID	g_UseUpper[ENUM_UPPER_COUNT][MAX_USE_PARTS_TYPE] =
{
	{900005, 90000500, ENUM_USE_MAN, CHARA_RES_ID_ACID_POLE},
	{900004, 90000400, ENUM_USE_MAN, CHARA_RES_ID_RED_BULLS},
	{900007, 90000700, ENUM_USE_WOMAN, CHARA_RES_ID_SWAT_FEMALE},
	{900008, 90000800, ENUM_USE_WOMAN, CHARA_RES_ID_TARANTULA},
	{900015, 90001500, ENUM_USE_MAN, CHARA_RES_ID_D_FOX},
	{900016, 90001600, ENUM_USE_MAN, CHARA_RES_ID_LEOPARD},
	{900017, 90001700, ENUM_USE_WOMAN, CHARA_RES_ID_VIPERRED},
	{900018, 90001800, ENUM_USE_WOMAN, CHARA_RES_ID_HIDE},
	{900002, 90000200, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{900001, 90000100, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{900003, 90000300, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{900010, 90001000, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{900009, 90000900, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{900006, 90000600, ENUM_USE_WOMAN, CHARA_RES_ID_UNKNOWN},
	{900011, 90001100, ENUM_USE_WOMAN, CHARA_RES_ID_UNKNOWN},
	{900012, 90001200, ENUM_USE_WOMAN, CHARA_RES_ID_UNKNOWN},
	{900013, 90001300, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{900014, 90001400, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{900019, 90001900, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{900020, 90002000, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{900021, 90002100, ENUM_USE_WOMAN, CHARA_RES_ID_UNKNOWN},
	{900022, 90002200, ENUM_USE_WOMAN, CHARA_RES_ID_UNKNOWN},
};

const T_ItemID	g_UseLower[ENUM_LOWER_COUNT][MAX_USE_PARTS_TYPE] =
{
	{1000002, 100000200, ENUM_USE_MAN, CHARA_RES_ID_ACID_POLE},
	{1000005, 100000500, ENUM_USE_MAN, CHARA_RES_ID_RED_BULLS},
	{1000006, 100000600, ENUM_USE_WOMAN, CHARA_RES_ID_SWAT_FEMALE},
	{1000007, 100000700, ENUM_USE_WOMAN, CHARA_RES_ID_TARANTULA},
	{1000012, 100001200, ENUM_USE_MAN, CHARA_RES_ID_D_FOX},
	{1000013, 100001300, ENUM_USE_MAN, CHARA_RES_ID_LEOPARD},
	{1000014, 100001400, ENUM_USE_WOMAN, CHARA_RES_ID_VIPERRED},
	{1000015, 100001500, ENUM_USE_WOMAN, CHARA_RES_ID_HIDE},
	{1000001, 100000100, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{1000003, 100000300, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{1000008, 100000800, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{1000009, 100000900, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{1000004, 100000400, ENUM_USE_WOMAN, CHARA_RES_ID_UNKNOWN},
	{1000010, 100001000, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{1000016, 100001600, ENUM_USE_WOMAN, CHARA_RES_ID_UNKNOWN},
	{1000011, 100001100, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{1000017, 100001700, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{1000018, 100001800, ENUM_USE_WOMAN, CHARA_RES_ID_UNKNOWN},
	{1000019, 100001900, ENUM_USE_WOMAN, CHARA_RES_ID_UNKNOWN},
	{1000020, 100002000, ENUM_USE_WOMAN, CHARA_RES_ID_UNKNOWN},
};

const T_ItemID	g_UseGlove[ENUM_GLOVE_COUNT][MAX_USE_PARTS_TYPE] =
{
	{1100002, 110000200, ENUM_USE_MAN, CHARA_RES_ID_ACID_POLE},
	{1100014, 110001400, ENUM_USE_MAN, CHARA_RES_ID_RED_BULLS},
	{1100008, 110000800, ENUM_USE_WOMAN, CHARA_RES_ID_SWAT_FEMALE},
	{1100003, 110000300, ENUM_USE_WOMAN, CHARA_RES_ID_TARANTULA},
	{1100010, 110001000, ENUM_USE_MAN, CHARA_RES_ID_D_FOX},
	{1100011, 110001100, ENUM_USE_MAN, CHARA_RES_ID_LEOPARD},
	{1100012, 110001200, ENUM_USE_WOMAN, CHARA_RES_ID_VIPERRED},
	{1100013, 110001300, ENUM_USE_WOMAN, CHARA_RES_ID_HIDE},
	{1100001, 110000100, ENUM_USE_MAN, CHARA_RES_ID_UNKNOWN},
	{1100004, 110000400, ENUM_USE_WOMAN, CHARA_RES_ID_UNKNOWN},
	{1100006, 110000600, ENUM_USE_WOMAN, CHARA_RES_ID_UNKNOWN},
};

const T_ItemID	g_UseBelt[ENUM_BELT_COUNT][MAX_USE_PARTS_TYPE] =
{
	{1200003, 120000300, ENUM_USE_MAN, CHARA_RES_ID_ACID_POLE},	
	{1200004, 120000400, ENUM_USE_WOMAN, CHARA_RES_ID_SWAT_FEMALE},
	{1200005, 120000500, ENUM_USE_MAN, CHARA_RES_ID_RED_BULLS},	
	{1200006, 120000600, ENUM_USE_WOMAN, CHARA_RES_ID_TARANTULA},
	{1200007, 120000700, ENUM_USE_MAN, CHARA_RES_ID_D_FOX},
	{1200008, 120000800, ENUM_USE_WOMAN, CHARA_RES_ID_HIDE},
	{1200009, 120000900, ENUM_USE_MAN, CHARA_RES_ID_LEOPARD},
	{1200010, 120001000, ENUM_USE_WOMAN, CHARA_RES_ID_VIPERRED},
  //{1200001, 120000100, ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},
  //{1200002, 120000200, ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},
};

const T_ItemID	g_UseHolster[ENUM_HOLSTER_COUNT][MAX_USE_PARTS_TYPE] =
{
	{1300003, 130000300, ENUM_USE_MAN, CHARA_RES_ID_ACID_POLE},
	{1300004, 130000400, ENUM_USE_WOMAN, CHARA_RES_ID_SWAT_FEMALE},
	{1300005, 130000500, ENUM_USE_MAN, CHARA_RES_ID_RED_BULLS},	
	{1300006, 130000600, ENUM_USE_WOMAN, CHARA_RES_ID_TARANTULA},
	{1300007, 130000700, ENUM_USE_MAN, CHARA_RES_ID_D_FOX},
	{1300008, 130000800, ENUM_USE_MAN, CHARA_RES_ID_LEOPARD},
	{1300009, 130000900, ENUM_USE_WOMAN, CHARA_RES_ID_VIPERRED},
	{1300010, 130001000, ENUM_USE_WOMAN, CHARA_RES_ID_HIDE},
  //{1300001, 130000100, ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},
  //{1300002, 130000200, ENUM_USE_NONE, CHARA_RES_ID_UNKNOWN},
};

//////////////////////////////////////////////////////////////////////////
// 항상 마지막에 있음
//////////////////////////////////////////////////////////////////////////

extern ENUM_USE_CHARA_TYPE GetCharaType(T_ItemID CharaItemID);

extern bool CmpUsePartItemID( INT32 ItemCnt, const T_ItemID CmpItemID[][MAX_USE_PARTS_TYPE], T_ItemID CharaItemID, T_ItemID ItemID );
extern bool CmpUsePartGoodsID( INT32 ItemCnt, const T_ItemID CmpItemID[][MAX_USE_PARTS_TYPE], T_ItemID CharaItemID, TGoodsID GoodsID );

extern bool g_CheckUsePartItemID(T_ItemID CharaItemID, T_ItemID ItemID);
extern bool g_CheckUsePartGoodsID(T_ItemID CharaItemID, TGoodsID GoodsID);

extern INT32 GetCharaTeamType(INT32 i32ResNum);

//////////////////////////////////////////////////////////////////////////

#endif